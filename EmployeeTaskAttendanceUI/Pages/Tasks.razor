@page "/tasks"

@using EmployeeTaskAttendanceUI.Services
@inject TaskService TaskService

<h3>Tasks</h3>

<button @onclick="CreateTask">Add New Task</button>

<table class="table">
    <thead>
        <tr>
            <th>Task Id</th>
            <th>Title</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Tasks)
        {
            <tr>
                <td>@task.TaskId</td>
                <td>@task.Title</td>
                <td>@task.Description</td>
                <td>
                    <button @onclick="() => EditTask(task.TaskId)">Edit</button>
                    <button @onclick="() => DeleteTask(task.TaskId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<TaskItem> Tasks = new List<TaskItem>();

    protected override async Task OnInitializedAsync()
    {
        Tasks = await TaskService.GetTasksAsync();
    }

    private async Task CreateTask()
    {
        // Logic to add a new task
    }

    private async Task EditTask(int taskId)
    {
        // Logic to edit an existing task
    }

    private async Task DeleteTask(int taskId)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete task with Id {taskId}?");
        if (confirmDelete)
        {
            await TaskService.DeleteTaskAsync(taskId);
            Tasks = await TaskService.GetTasksAsync();
        }
    }
}
